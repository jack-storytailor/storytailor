import { IAstNode, IAstToken, IAstTokenSequence, IAstText, IAstOperator, IAstProgram, IAstKeyword, IAstDebuggerKeyword, IAstCommentLine, IAstCommentBlock, IAstIdentifier, IAstIdentifierScope, IAstRawIdentifier, IAstContextIdentifier, IAstFunctionExpression, IAstFunctionDeclaration, IAstVariableDeclaration, IAstPropertyDeclaration, IAstStatement, IAstBreakStatement, IAstReturnStatement, IAstContinueStatement, IAstBlockStatement, IAstIfStatement, IAstSwitchStatement, IAstCaseStatement, IAstWhileStatement, IAstDoWhileStatement, IAstForStatement, IAstForInStatement, IAstImportStatement, IAstTryStatement, IAstCatchStatement, IAstFinallyStatement, IAstThrowStatement, IAstExpressionStatement, IAstParenExpression, IAstObjectExpression, IAstCallExpression, IAstOperationExpression, IAstUpdateExpression, IAstBinaryExpression, IAstMemberExpression, IAstIndexerExpression, IAstConditionalExpression, IAstNewExpression, IAstDeleteExpression, IAstOuterStatement, IAstTextLineStatement, IAstObjectLineStatement, IAstStringIncludeStatement, IAstPrototypeExpression, IAstDeleteLineExpression, IAstScope, IAstTag, IAstNumber, IAstString, IAstBoolean, IAstArray, IAstModule, IAstAwaitExpression, IAstYieldExpression } from "./IAstNode";
import { IHash } from "../shared/IHash";
export declare const astUtils: {
    childrenRegistry: {
        Token: (ast: IAstToken) => IAstNode[];
        TokenSequence: (ast: IAstTokenSequence) => IAstNode[];
        Text: (ast: IAstText) => IAstNode[];
        Operator: (ast: IAstOperator) => IAstNode[];
        Module: (ast: IAstModule) => IAstNode[];
        Program: (ast: IAstProgram) => IAstNode[];
        Keyword: (ast: IAstKeyword) => IAstNode[];
        DebuggerKeyword: (ast: IAstDebuggerKeyword) => IAstNode[];
        CommentLine: (ast: IAstCommentLine) => IAstNode[];
        CommentBlock: (ast: IAstCommentBlock) => IAstNode[];
        Number: (ast: IAstNumber) => IAstNode[];
        String: (ast: IAstString) => IAstNode[];
        Boolean: (ast: IAstBoolean) => IAstNode[];
        Array: (ast: IAstArray) => IAstNode[];
        Identifier: (ast: IAstIdentifier) => IAstNode[];
        IdentifierScope: (ast: IAstIdentifierScope) => IAstNode[];
        RawIdentifier: (ast: IAstRawIdentifier) => IAstNode[];
        ContextIdentifier: (ast: IAstContextIdentifier) => IAstNode[];
        FunctionExpression: (ast: IAstFunctionExpression) => IAstNode[];
        FunctionDeclaration: (ast: IAstFunctionDeclaration) => IAstNode[];
        VariableDeclaration: (ast: IAstVariableDeclaration) => IAstNode[];
        PropertyDeclaration: (ast: IAstPropertyDeclaration) => IAstNode[];
        Statement: (ast: IAstStatement) => IAstNode[];
        BreakStatement: (ast: IAstBreakStatement) => IAstNode[];
        ReturnStatement: (ast: IAstReturnStatement) => IAstNode[];
        ContinueStatement: (ast: IAstContinueStatement) => IAstNode[];
        BlockStatement: (ast: IAstBlockStatement) => IAstNode[];
        IfStatement: (ast: IAstIfStatement) => IAstNode[];
        SwitchStatement: (ast: IAstSwitchStatement) => IAstNode[];
        CaseStatement: (ast: IAstCaseStatement) => IAstNode[];
        WhileStatement: (ast: IAstWhileStatement) => IAstNode[];
        DoWhileStatement: (ast: IAstDoWhileStatement) => IAstNode[];
        ForStatement: (ast: IAstForStatement) => IAstNode[];
        ForInStatement: (ast: IAstForInStatement) => IAstNode[];
        ImportStatement: (ast: IAstImportStatement) => IAstNode[];
        TryStatement: (ast: IAstTryStatement) => IAstNode[];
        CatchStatement: (ast: IAstCatchStatement) => IAstNode[];
        FinallyStatement: (ast: IAstFinallyStatement) => IAstNode[];
        ThrowStatement: (ast: IAstThrowStatement) => IAstNode[];
        ExpressionStatement: (ast: IAstExpressionStatement) => IAstNode[];
        AwaitExpression: (ast: IAstAwaitExpression) => IAstNode[];
        YieldExpression: (ast: IAstYieldExpression) => IAstNode[];
        ParenExpression: (ast: IAstParenExpression) => IAstNode[];
        ObjectExpression: (ast: IAstObjectExpression) => IAstNode[];
        CallExpression: (ast: IAstCallExpression) => IAstNode[];
        OperationExpression: (ast: IAstOperationExpression) => IAstNode[];
        UpdateExpression: (ast: IAstUpdateExpression) => IAstNode[];
        BinaryExpression: (ast: IAstBinaryExpression) => IAstNode[];
        MemberExpression: (ast: IAstMemberExpression) => IAstNode[];
        IndexerExpression: (ast: IAstIndexerExpression) => IAstNode[];
        ConditionalExpression: (ast: IAstConditionalExpression) => IAstNode[];
        NewExpression: (ast: IAstNewExpression) => IAstNode[];
        DeleteExpression: (ast: IAstDeleteExpression) => IAstNode[];
        OuterStatement: (ast: IAstOuterStatement) => IAstNode[];
        TextLineStatement: (ast: IAstTextLineStatement) => IAstNode[];
        ObjectLineStatement: (ast: IAstObjectLineStatement) => IAstNode[];
        StringIncludeStatement: (ast: IAstStringIncludeStatement) => IAstNode[];
        PrototypeExpression: (ast: IAstPrototypeExpression) => IAstNode[];
        DeleteLineExpression: (ast: IAstDeleteLineExpression) => IAstNode[];
        Scope: (ast: IAstScope) => IAstNode[];
        Tag: (ast: IAstTag) => IAstNode[];
    };
    forEachChild: (root: IAstNode, operation: (node: IAstNode) => void) => void;
    forEachChildSpecific: (root: IAstNode, operations: IHash<(node: any) => void>, defaultOp: (node: any) => void) => void;
};
