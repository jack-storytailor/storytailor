export enum AstNodeType {
  // general
  Token = "Token",
  TokenSequence = "TokenSequence",
  Text = "Text",
  Operator = "Operator",
  Module = "Module",
  Program = "Program",
  Keyword = "Keyword",
  DebuggerKeyword = "DebuggerKeyword",
  CommentLine = "CommentLine",
  CommentBlock = "CommentBlock",
  // literals
  Number = "Number",
  String = "String",
  RegexLiteral = "RegexLiteral",
  Boolean = "Boolean",
  Array = "Array",
  // identifiers
  Identifier = "Identifier",
  IdentifierScope = "IdentifierScope",
  RawIdentifier = "RawIdentifier",
  ContextIdentifier = "ContextIdentifier",
  // declarations
  FunctionDeclaration = "FunctionDeclaration",
  VariableDeclaration = "VariableDeclaration",
  PropertyDeclaration = "PropertyDeclaration",
  // statements
  BreakStatement = "BreakStatement",
  ContinueStatement = "ContinueStatement",
  BlockStatement = "BlockStatement",
  IfStatement = "IfStatement",
  SwitchStatement = "SwitchStatement",
  CaseStatement = "CaseStatement",
  WhileStatement = "WhileStatement",
  DoWhileStatement = "DoWhileStatement",
  ForStatement = "ForStatement",
  ForInStatement = "ForInStatement",
  ForOfStatement = "ForOfStatement",
  ImportStatement = "ImportStatement",
  RawImportStatement = "RawImportStatement",
  ImportItem = "ImportItem",
  TryStatement = "TryStatement",
  CatchStatement = "CatchStatement",
  FinallyStatement = "FinallyStatement",
  ThrowStatement = "ThrowStatement",
  ExportStatement = "ExportStatement",
  ClassDeclaration = "ClassDeclaration",
  // expression statements
  KeywordNode = "KeywordNode",
  ParenExpression = "ParenExpression",
  ObjectLiteral = "ObjectLiteral",
  CallExpression = "CallExpression",
  UpdateExpression = "UpdateExpression",
  BinaryExpression = "BinaryExpression",
  MemberExpression = "MemberExpression",
  IndexerExpression = "IndexerExpression",
  ConditionalExpression = "ConditionalExpression",
  FunctionExpression = "FunctionExpression",
  // storytailor-specific
  OuterStatement = "OuterStatement",
  TextLineStatement = "TextLineStatement",
  ObjectLineStatement = "ObjectLineStatement",
  StringIncludeStatement = "StringIncludeStatement",
  PrototypeExpression = "PrototypeExpression",
  DeleteLineExpression = "DeleteLineExpression",
  Scope = "Scope",
}
